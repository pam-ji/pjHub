networks:
  network1:
    driver: bridge
    ipam:
      config:
        - subnet: 200.0.0.0/16
          gateway: 200.0.0.1
volumes:
    postgresql:
    prometheus:
    grafana:
services:
  envoy:
    privileged: true
    image: envoyproxy/envoy:v1.20-latest
    volumes:
    - ./envoy/served-config/envoy.yaml:/etc/envoy/config.yaml 
    - ./envoy/configs/security/tls.crt:/etc/certs/tls.crt
    - ./envoy/configs/security/tls.key:/etc/certs/tls.key
    entrypoint: /usr/local/bin/envoy -c /etc/envoy/config.yaml 
    networks:
      network1:
        ipv4_address: 200.0.0.2
    ports:
    - "8000:8000"
    - "8443:8443"
    - "19000:19000"

  # graphql-api:
  #   build: 
  #     context: .
  #     dockerfile: ./graphQl/Dockerfile.graphQl
  #   # environment:
  #   #   - AWS_ENDPOINT=http://localstack:4566
  #   #   - REDIS_HOST=redis
  #   #   - POSTGRES_HOST=postgres
  #   ports:
  #     - "5000:5000"
  postgresql:
      image: postgres:15.4
      hostname: postgresql
      container_name: postgresql
      environment:
          POSTGRES_USER: ${DB_USERNAME}
          POSTGRES_PASSWORD: ${DB_PASSWORD}
          POSTGRES_DB: ${DB_NAME}
          PGDATA: /data/postgres
          privileged: true

          TZ: Asia/Tehran
      healthcheck:
          test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USERNAME}"]
          interval: 5s
          timeout: 5s
          retries: 5
      volumes:
          - postgresql:/data/postgres
      ports:
          - "5432:5432"
      restart: unless-stopped
      networks:
        network1:
          ipv4_address: 200.0.0.4
      
  redis:
    image: redis:latest
    privileged: true
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    command: ["redis-server"]
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis.conf
    networks:
      network1:
        ipv4_address: 200.0.0.5

  forgejo:
    image: mstreicherde/forgejo
    networks:
      network1:
        ipv4_address: 200.0.0.6
    ports:
      - "2000:2000"
      - "9022:22"
    environment:
      - USER=git
      - USER_UID=1000
      - USER_GID=1000
      - FORGEJO__server__SSH_LISTEN_PORT=22
      - FORGEJO__server__SSH_PORT=9022
    restart: always
    volumes:
      - ./forgejo/data:/data
      - ./forgejo/config:/etc/forgejo
    depends_on:
      - postgresql

  prometheus:
      image: prom/prometheus
      hostname: prom
      container_name: prometheus
      privileged: true
      volumes:
          - ./prometheus/:/etc/prometheus/
          - prometheus:/prometheus
      command:
          - '--config.file=/etc/prometheus/prometheus.yaml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
      ports:
          - "${PROMETHEUS_PORT:-9090}:9090"
      restart: unless-stopped
      networks:
        network1:
          ipv4_address: 200.0.0.10

  grafana:
      image: grafana/grafana
      container_name: grafana
      volumes:
      - grafana:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana.ini
      - ./grafana/datasource.yml:/etc/provisioning/datasources/datasource.yaml
      - ./grafana/dashboard.json:/usr/share/public/dashboards/home.json
      privileged: true
      environment:
          GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
          GF_USERS_ALLOW_SIGN_UP: false
      # volumes:
      #     - grafana:/var/lib/grafana
      ports:
          - "${GRAFANA_PORT:-3000}:3000"
      restart: unless-stopped
      networks:
        network1:
          ipv4_address: 200.0.0.11

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      network1:
        ipv4_address: 200.0.0.12
     


  # datanode:
    # image: apache/ozone:latest
    # ports:
        # - 9864
    # command: ["ozone","datanode"]
    # env_file:
        # - ./ozone/ozone.env
  # om:
    # image: apache/ozone:latest
    # ports:
        # - 9874:9874
    # environment:
        # ENSURE_OM_INITIALIZED: /data/metadata/om/current/VERSION
        # WAITFOR: scm:9876
    # env_file:
        # - ./ozone/ozone.env
    # command: ["ozone","om"]
  # scm:
    # image: apache/ozone:latest
    # ports:
        # - 9876:9876
    # env_file:
        # - ./ozone/ozone.env
    # environment:
        # ENSURE_SCM_INITIALIZED: /data/metadata/scm/current/VERSION
    # command: ["ozone","scm"]
  # recon:
    # image: apache/ozone:latest
    # ports:
        # - 9888:9888
    # env_file:
        # - ./ozone/ozone.env
    # command: ["ozone","recon"]
  # s3g:
    # image: apache/ozone:latest
    # ports:
        # - 9878:9878
    # env_file:
        # - ./ozone/ozone.env
    # command: ["ozone","s3g"]
#  
# 
  postgresql-exporter:
      image: prometheuscommunity/postgres-exporter
      container_name: postgresql-exporter
      privileged: true
      ports:
          - "9187:9187"
      environment:
          DATA_SOURCE_NAME: "postgres://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}?sslmode=disable"
      depends_on:
          prometheus:
              condition: service_started
          postgresql:
              condition: service_healthy
      restart: unless-stopped
      networks:
          - network1
  # htmlgen-frontend:
  #   build:
  #     context: ../../frontend
  #     dockerfile: ./htmlgen/Dockerfile.frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - API_URL=http://htmlgen-api:5000
  #     - REDIS_HOST=redis
  #     - POSTGRES_HOST=postgres
  #
  # htmlgen-api:
  #     image: localhost:3001/pjhub/htmlgen-api:latest
  #     ports:
  #       - "5000:5000"
  #     environment:
  #       - REDIS_HOST=redis
  #       - POSTGRES_HOST=postgres
  #     depends_on:
  #       - redis
  #       - postgres
  #       - forgejo
  #
  # slaithespire-ml:
  #     build:
  #       context: .
  #       dockerfile: slaithespire/Dockerfile.ml
  #     volumes:
  #       - ./data:/data
  #     environment:
  #       - MINIO_HOST=minio
  #       - REDIS_HOST=redis
  #
  # slaithespire-api:
  #     build:
  #       context: .
  #       dockerfile: slaithespire/Dockerfile.api
  #     ports:
  #       - "5001:5000"
  #     environment:
  #       - ML_HOST=slaithespire-ml
  #       - REDIS_HOST=redis
  #       - POSTGRES_HOST=postgres
  #     depends_on:
  #       - slaithespire-ml
  #       - redis
  #       - postgres
  #
  # localstack:
  #     image: localstack/localstack:latest
  #     ports:
  #       - "4566:4566"
  #     environment:
  #       - SERVICES=s3,lambda,apigateway,route53,ec2,ecr,ses
  #       - DEBUG=1
  #
  # graphql-api:
  #     build: 
  #       context: .
  #       dockerfile: graphQl/Dockerfile.graphQl
  #     environment:
  #       - AWS_ENDPOINT=http://localstack:4566
  #       - REDIS_HOST=redis
  #       - POSTGRES_HOST=postgres
  #     ports:
  #       - "5000:5000"
  #
  #
  # vault:
  #     image: vault:latest
  #     ports:
  #       - "8200:8200"
  #     environment:
  #       VAULT_DEV_ROOT_TOKEN_ID: root
  #
  # security:
  #     image: your-security-image:latest
  #     ports:
  #       - "5000:5000"
  #     environment:
  #       - SECURITY_PORT=5000
  #       - SECURITY_HOST=0.0.0.0
  #
  # suricata:
  #     image: your-suricata-image:latest
  #     ports:
  #       - "514:514"
  #     environment:
  #       - SURICATA_PORT=514
  #       - SURICATA_HOST=0.0.0.0
  #
  # elasticsearch:
  #     image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
  #     environment:
  #       - discovery.type=single-node
  #       - xpack.security.enabled=false
  #       - ES_JAVA_OPTS=-Xms512m -Xmx512m
  #       - cluster.name=pjhub-cluster
  #       - node.name=pjhub-node
  #       - bootstrap.memory_lock=true
  #     ports:
  #       - "9200:9200"
  #       - "9300:9300"
  #     volumes:
  #       - ./elasticsearch/data:/usr/share/elasticsearch/data
  #     ulimits:
  #       memlock:
  #         soft: -1
  #         hard: -1
  #     networks:
  #       - app-network
  #
  # pytorch:
  #     image: your-pytorch-image:latest
  #     ports:
  #       - "8000:8000"
  #     environment:
  #       - PYTORCH_PORT=8000
  #       - PYTORCH_HOST=0.0.0.0
  #     depends_on:
  #       - graphql-api
  #     networks:
  #       - app-network
  #
  # api:
  #     image: your-api-image:latest
  #     ports:
  #       - "8081:8081"
  #     environment:
  #       - API_PORT=8081
  #       - API_HOST=0.0.0.0
  #     depends_on:
  #       - pytorch
  #       - graphql-api

