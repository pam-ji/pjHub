
# infrastructure
- ***apache iceberg with minio:*** https://blog.min.io/a-developers-introduction-to-apache-iceberg-using-minio/
- docker compose
- oauth2 provider for the enduser
- aws with localstack
- frontend with react
- docker compose and localstack
- minio for ai-storage
- GraphQl and go as backend restFul Api
- siem with Elasticstack
- traefik as reverseproxy for local deployment and docker compose
- grafana monitoring
- gitops with argo
- *AWS email* service
- *AWS Route53* loadbalancer via localstack
- *AWS S3* with localstack
- *AWS Api Gateway* for restFul Api (GraphQL and redis) with localstack
- *AWS EC2* instance with localstack for frontend
- *AWS Elastic Container Registry* for fas container deployments 
- *AWS LAmbda* - the deployments are for admins and private services. they are for development and they come with a python runtime and the most needed machine learnng tools like pytorch and tensorflow
- AWS firewall and Cloudsecurity with Localstack - here are several options like AWS Network Firewall,AWS Security Groups, Shield, WAF,  Firewall Manager, AWS Network ACLs, AWS VPC Flow Logs

- seperated buckets for frontend and backend
- kafka with localstack
- github actions for ci/cd including code analysis with checkov (add a github actions workflow)
- awaiting code check and reviews
- pytorch and ml frameworks deplplpoyed via containers in docker compose and aws lambda. ec2 instance with localstack for frontend
- ratelimiter (aws api gateway or traefik)
- oauth2 acl for certain subdomains and services via api gateway for training and private applications, or applications that are in development
- Iam roles for admin for private services in aws
- useraccounts for onprem and aws services
- postgres 
- cicd pipeline sand react router for fluid deploiments
- redis caching
- secrets via hashicorp vault
- impementing the folder structure for the backend
- OPTIONAL! WAF/Shield Alternative === ModSecurity (NGINX/Traefik Plugin) + Suricata (IDS)
- OPTIONAL! AWS VPC/Networking alternative === Calico (Netzwerk-Policies) + Open vSwitch
- terraform and ansible iac deployements
- gitOps with ArgoCd(multi workspace for 2. repo named pjHub_gitOps)
- training of multiple models for several applications like html generator, malarias self played game, self hosted deepseek r1 instance and several models from hugging face
- dashboard for training in the frontend for admins
- starting training and roll back via dashboard
- start applications from the website
postgres with redis and  

## project Structure
```
PjHub
|
|-- apps
|    |
|    |-- html_generator
|    |-- slay-the-spire
|
|-- docs
|
|-- backend
|    |
|    |-- go
|    |-- postgres
|    |-- redis
|    |-- traefik
|    |-- minio
|
|-- frontend
|    |
|    |-- public
|    |-- src
|
|-- gitOps
|    |
|    |-- Argo
|    |-- docker
|    |    |
|    |    |-- minio
|    |    |-- redis
|    |    |-- traefik
|    |    |-- docker-compose.yml
|
|-- IaC
|    |
|    |-- ansible
|    |-- terraform
|    |-- aws
|    |-- localstack
```
