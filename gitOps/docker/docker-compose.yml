version: '3'

services:
  htmlgen-frontend:
    build:
      context: .
      dockerfile: docker/htmlgen/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://htmlgen-api:5000
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres

  htmlgen-api:
    build:
      context: .
      dockerfile: docker/htmlgen/Dockerfile.api
    ports:
      - "5000:5000"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    depends_on:
      - redis
      - postgres

  slaithespire-ml:
    build:
      context: .
      dockerfile: docker/slaithespire/Dockerfile.ml
    volumes:
      - ./data:/data
    environment:
      - MINIO_HOST=minio
      - REDIS_HOST=redis

  slaithespire-api:
    build:
      context: .
      dockerfile: docker/slaithespire/Dockerfile.api
    ports:
      - "5001:5000"
    environment:
      - ML_HOST=slaithespire-ml
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    depends_on:
      - slaithespire-ml
      - redis
      - postgres

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,lambda,apigateway,route53,ec2,ecr,ses
      - DEBUG=1

  graphql-api:
    build: 
      context: ../../backend/graphql
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    ports:
      - "5000:5000"

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data

  traefik:
    image: traefik:v2.4
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data
    volumes:
      - ./minio/data:/data

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  vault:
    image: vault:latest
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root

  security:
    image: your-security-image:latest
    ports:
      - "5000:5000"
    environment:
      - SECURITY_PORT=5000
      - SECURITY_HOST=0.0.0.0

  suricata:
    image: your-suricata-image:latest
    ports:
      - "514:514"
    environment:
      - SURICATA_PORT=514
      - SURICATA_HOST=0.0.0.0

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - cluster.name=pjhub-cluster
      - node.name=pjhub-node
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - app-network

  pytorch:
    image: your-pytorch-image:latest
    ports:
      - "8000:8000"
    environment:
      - PYTORCH_PORT=8000
      - PYTORCH_HOST=0.0.0.0
    depends_on:
      - graphql-api

  api:
    image: your-api-image:latest
    ports:
      - "8081:8081"
    environment:
      - API_PORT=8081
      - API_HOST=0.0.0.0
    depends_on:
      - pytorch
      - graphql-api